package ru.merion.aqa.lesson23.ext;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolutionException;
import org.junit.jupiter.api.extension.ParameterResolver;
import ru.merion.aqa.ext.Token;
import ru.merion.aqa.lesson15.XClientsWebClient;
import ru.merion.aqa.lesson23.db.UserRepository;
import ru.merion.aqa.lesson23.db.jdbc.UserRepositoryJdbc;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

public class TokenProvider implements ParameterResolver {
    public UserRepository userRepository;

    @Override
    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {
        return parameterContext.getParameter().isAnnotationPresent(Token.class);
    }

    @Override
    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {
        boolean needToCreateNewUser = parameterContext.getParameter().getAnnotation(Token.class).createNewUser();
        String login = parameterContext.getParameter().getAnnotation(Token.class).login();
        String pass = parameterContext.getParameter().getAnnotation(Token.class).pass();

        if (needToCreateNewUser) {
            if (userRepository == null) {
                Connection connection = (Connection) extensionContext.getStore(ExtensionContext.Namespace.GLOBAL).get("db_connection");
                userRepository = new UserRepositoryJdbc(connection);
            }
            try {
                login = "AUTOGENERATED_USER";
                pass = "PASSWORD";
                userRepository.addUser(login, pass);
            } catch (SQLException e) {
            }
        }

        XClientsWebClient client = (XClientsWebClient) extensionContext.getStore(ExtensionContext.Namespace.GLOBAL).get("x_client");

        try {
            return client.getToken(login, pass);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
