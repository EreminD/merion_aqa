package ru.merion.aqa.ext;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolutionException;
import org.junit.jupiter.api.extension.ParameterResolver;
import ru.merion.aqa.lesson15.XClientsWebClient;
import ru.merion.aqa.lesson22.UserRepositoryJDBC;
import ru.merion.aqa.lesson22.UserRepository;

import java.io.IOException;
import java.sql.SQLException;

public class TokenProvider implements ParameterResolver {
    public static final String CONNECTION_STRING = "jdbc:postgresql://dpg-cn1542en7f5s73fdrigg-a.frankfurt-postgres.render.com/x_clients_xxet";
    public static final String USERNAME = "x_clients_user";
    public static final String PASSWORD = "x7ngHjC1h08a85bELNifgKmqZa8KIR40";
    private UserRepository userRepository;

    @Override
    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {
        return parameterContext.getParameter().isAnnotationPresent(Token.class);
    }

    @Override
    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {
        boolean needToCreateNewUser = parameterContext.getParameter().getAnnotation(Token.class).createNewUser();
        String login = parameterContext.getParameter().getAnnotation(Token.class).login();
        String pass = parameterContext.getParameter().getAnnotation(Token.class).pass();

        if (needToCreateNewUser) {
            if (userRepository == null) {
                userRepository = new UserRepositoryJDBC(CONNECTION_STRING, USERNAME, PASSWORD);
            }
            try {
                login = "AUTOGENERATED_USER";
                pass = "PASSWORD";
                userRepository.addUser(login, pass);
            } catch (SQLException e) {
            }
        }

        XClientsWebClient client = (XClientsWebClient) extensionContext.getStore(ExtensionContext.Namespace.GLOBAL).get("x_client");

        try {
            return client.getToken(login, pass);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
